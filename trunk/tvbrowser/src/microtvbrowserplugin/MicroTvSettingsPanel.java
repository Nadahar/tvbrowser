/*
 * PDA-Plugin
 * Copyright (C) 2004 gilson laurent pumpkin@gmx.de
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 */

package microtvbrowserplugin;

import java.util.Hashtable;
import javax.swing.JLabel;
import util.ui.Localizer;

/**
 *
 * @author  pumpkin
 */
public class MicroTvSettingsPanel extends javax.swing.JPanel {
  
  Hashtable valuesForExport;
  int lastValue;
  
  static Localizer mLocalizer = Localizer.getLocalizerFor(MicroTvSettingsPanel.class);
  
  /** Creates new form MicroTvStettingsPanel */
  public MicroTvSettingsPanel() {
    initComponents();
    
    valuesForExport = new Hashtable();
    valuesForExport.put(new Integer(0),mLocalizer.msg("basic information","basic information"));
    valuesForExport.put(new Integer(1),mLocalizer.msg("add audio and screentype, favorites, reminder, ratings","add audio and screentype, favorites, reminder, ratings"));
    valuesForExport.put(new Integer(2),mLocalizer.msg("add short description, year, actors","add short description, year, actors"));
    valuesForExport.put(new Integer(3),mLocalizer.msg("add long description, orignal title/episode, moderation","add long description, orignal title/episode, moderation"));
    valuesForExport.put(new Integer(4),mLocalizer.msg("everything","everything"));
    this.radioMicroEdition.setSelected(true);
    this.sliderExportStateChanged(null);
    this.sliderDaysStateChanged(null);
    
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        radioNanoEdition = new javax.swing.JRadioButton();
        radioMicroEdition = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        sliderDays = new javax.swing.JSlider();
        labelDays = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sliderExport = new javax.swing.JSlider();
        labelExport = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Edition");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(jLabel1, gridBagConstraints);

        radioNanoEdition.setText("NanoEdition");
        buttonGroup1.add(radioNanoEdition);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(radioNanoEdition, gridBagConstraints);

        radioMicroEdition.setText("MicroEdition");
        buttonGroup1.add(radioMicroEdition);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(radioMicroEdition, gridBagConstraints);

        jLabel3.setText(java.util.ResourceBundle.getBundle("microtvbrowserplugin/microtvbrowserplugin").getString("MicroTvSettingsPanel.day(s)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(jLabel3, gridBagConstraints);

        sliderDays.setMaximum(14);
        sliderDays.setMinimum(1);
        sliderDays.setPaintTicks(true);
        sliderDays.setSnapToTicks(true);
        sliderDays.setValue(7);
        sliderDays.setValueIsAdjusting(true);
        sliderDays.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderDaysStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(sliderDays, gridBagConstraints);

        labelDays.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelDays.setText("jLabel4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(labelDays, gridBagConstraints);

        jLabel2.setText("Export");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(jLabel2, gridBagConstraints);

        sliderExport.setMaximum(4);
        sliderExport.setPaintTicks(true);
        sliderExport.setSnapToTicks(true);
        sliderExport.setValue(1);
        sliderExport.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderExportStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 5);
        add(sliderExport, gridBagConstraints);

        labelExport.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labelExport.setText("jLabel5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(labelExport, gridBagConstraints);

    }//GEN-END:initComponents
    
	private void sliderDaysStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderDaysStateChanged
          this.labelDays.setText(this.sliderDays.getValue()+" "+mLocalizer.msg("day(s)","day(s)"));
	}//GEN-LAST:event_sliderDaysStateChanged
        
	private void sliderExportStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderExportStateChanged
          labelExport.setText((String) valuesForExport.get(new Integer(this.sliderExport.getValue())));
	}//GEN-LAST:event_sliderExportStateChanged
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    protected javax.swing.JLabel labelExport;
    protected javax.swing.JLabel labelDays;
    protected javax.swing.JSlider sliderDays;
    protected javax.swing.JRadioButton radioMicroEdition;
    private javax.swing.ButtonGroup buttonGroup1;
    protected javax.swing.JSlider sliderExport;
    protected javax.swing.JRadioButton radioNanoEdition;
    // End of variables declaration//GEN-END:variables
    
}
