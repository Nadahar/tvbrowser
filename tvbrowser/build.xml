<?xml version="1.0"?>
<!--
 | Ant build script for the TV-Browser project.
 |
 | TV-Browser
 | Copyright (C) 04-2003 Martin Oberhauser (martin_oat@yahoo.de)
 |
 | This program is free software; you can redistribute it and/or
 | modify it under the terms of the GNU General Public License
 | as published by the Free Software Foundation; either version 2
 | of the License, or (at your option) any later version.
 |
 | This program is distributed in the hope that it will be useful,
 | but WITHOUT ANY WARRANTY; without even the implied warranty of
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 | GNU General Public License for more details.
 |
 | You should have received a copy of the GNU General Public License
 | along with this program; if not, write to the Free Software
 | Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 |
 | CVS information:
 |  $RCSfile$
 |   $Source$
 |     $Date$
 |   $Author$
 | $Revision$
 |
 | Author: Til Schneider, www.murfman.de
 +-->
<project name="TV-Browser" default="targets" basedir=".">

  <!--
   | The properties and paths
   +-->
  <property file="build.properties"/>
  <property environment="env"/>

  <property name="version.file" value="${version}"/>
  <property name="programname" value="TV-Browser"/>
  <property name="programname.file" value="TvBrowser"/>

  <property name="doc.header" value="${programname} ${version} API"/>
  <property name="doc.title" value="API documentation for ${programname} ${version}"/>
  <property name="doc.bottom" value="${programname} ${version}, Copyright (C) 04-2003 Martin Oberhauser (martin_oat@yahoo.de)"/>

  <property name="lib.dir" value="lib"/>
  <property name="src.dir" value="src"/>
  <property name="txt.dir" value="txt"/>
  <property name="doc.dir" value="doc"/>
  <property name="unpacked.dir" value="unpacked"/>
  <property name="themepacks.dir" value="themepacks"/>
  <property name="classes.dir" value="classes"/>
  <property name="runtime.dir" value="runtime"/>
  <property name="tvbrowser.runtime.dir" value="${runtime.dir}/tvbrowser"/>
  <property name="mirrorupdater.runtime.dir" value="${runtime.dir}/mirrorupdater"/>
  <property name="primarydatamanager.runtime.dir" value="${runtime.dir}/primarydatamanager"/>
  <property name="installer.dir" value="installer"/>
  <property name="jsmooth.dir" value="jsmooth"/>
  <property name="public.dir" value="public"/>
  <property name="package-lists.dir" value="${txt.dir}/package-lists"/>

  <path id="sourcepath">
    <pathelement location="${src.dir}"/>
  </path>

  <path id="classpath">
    <pathelement location="${classes.dir}"/>
    <fileset dir="${lib.dir}">
      <include name="*.jar"/>
      <exclude name="ant.jar"/>
    </fileset>
    <!-- <pathelement location="${env.JAVA_HOME}/lib/tools.jar"/> -->
  </path>

  <path id="docpath">
    <path refid="sourcepath"/>
  </path>



  <!--
   | Display all public targets
   +-->
  <target name="targets">
    <echo message="usage: build [target]"/>
    <echo message=""/>
    <echo message="available targets:"/>
    <echo message="  targets       Shows this list of targets."/>
    <echo message="  dump-info     Dumps some information (VM-Version...)."/>
    <echo message="  clean         Deletes the classes and unpacked directory."/>
    <echo message="  clean-runtime Deletes the runtime directory."/>
    <echo message="  doc           Generates the JavaDoc documentation."/>
    <echo message="  make          Compiles the source code."/>
    <echo message="  runtime       Prepares the runtime directory."/>
    <echo message="  run           Runs the project."/>
    <echo message="  installer     Creates a Windows installer for the project."/>
    <echo message="  public        Creates all the stuff that can be downloaded."/>
    <echo message="  test          Does the JUnit tests."/>
    <echo message="  all           Creates all (Same as public)."/>
  </target>



  <!--
   | Dump some information.
   +-->
  <target name="dump-info">
    <echo message="JAVA_HOME=${env.JAVA_HOME}" />
    <echo message="java.vm.info=${java.vm.info}" />
    <echo message="java.vm.name=${java.vm.name}" />
    <echo message="java.vm.vendor=${java.vm.vendor}" />
    <echo message="java.vm.version=${java.vm.version}" />
    <echo message="os.arch=${os.arch}" />
    <echo message="os.name=${os.name}" />
    <echo message="os.version=${os.version}" />
    <echo message="file.encoding=${file.encoding}" />
    <echo message="user.language=${user.language}" />
  </target>



  <!--
   | Deletes the classes and the runtime directory.
   +-->
  <target name="clean">
    <delete dir="${classes.dir}"/>
    <delete dir="${unpacked.dir}"/>
  </target>



  <!--
   | Deletes the runtime directory
   +-->
  <target name="clean-runtime">
    <delete dir="${runtime.dir}"/>
  </target>



  <!--
   | Generates the JavaDoc documentation.
   +-->
  <target name="doc">
    <echo message="Generating JavaDoc documentation ..." />
    <delete dir="${doc.dir}"/>
    <mkdir dir="${doc.dir}"/>
    <javadoc packagenames="*"
             sourcepathref="docpath"
             classpathref="classpath"
             destdir="${doc.dir}"
             doctitle="${doc.title}"
             windowtitle="${doc.title}"
             additionalparam="-breakiterator"
             header="${doc.header}"
             bottom="${doc.bottom}"
             access="package"
             failonerror="true">
      <link offline="true"
            href="${java-api-location}"
            packagelistLoc="${package-lists.dir}/jdk/"/>
    </javadoc>
  </target>



  <!--
   | Compiles the source code.
   +-->
  <target name="make">
    <echo message="Compiling the source code ..." />
    <mkdir dir="${classes.dir}"/>
    <javac destdir="${classes.dir}" debug="${debug}" deprecation="true">
      <src>
        <path refid="sourcepath"/>
      </src>
      <classpath>
        <path refid="classpath"/>
      </classpath>
    </javac>

    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" includes="**/*.gif"/>
      <fileset dir="${src.dir}" includes="**/*.jpg"/>
      <fileset dir="${src.dir}" includes="**/*.png"/>
      <fileset dir="${src.dir}" includes="**/*.dtd"/>
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
  </target>



  <!--
   | Creates the runtime directory.
   +-->
  <target name="runtime" depends="make">
    <echo message="Creating the jars ..." />

	<!-- Make the TV-Browser runtime -->
    <mkdir dir="${tvbrowser.runtime.dir}"/>
    
    <!-- Extract the libraries for the tvbrowser.jar into the temp.dir -->
    <mkdir dir="${unpacked.dir}/skinlf.jar"/>
    <unjar src="${lib.dir}/skinlf.jar" dest="${unpacked.dir}/skinlf.jar"/>

	<!-- Pack the tvbrowser.jar -->    
    <jar jarfile="${tvbrowser.runtime.dir}/tvbrowser.jar"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="tvbrowser.TVBrowser"/>
      </manifest>
      <fileset dir="${classes.dir}" includes="tvbrowser/**"/>
      <fileset dir="${classes.dir}" includes="devplugin/**"/>
      <fileset dir="${classes.dir}" includes="tvdataservice/**"/>
      <fileset dir="${classes.dir}" includes="util/**"/>
      <fileset dir="${classes.dir}" includes="com/**"/>
      <fileset dir="${unpacked.dir}/skinlf.jar" includes="com/**"/>
    </jar>

	<!-- Pack the plugin jars -->    
    <mkdir dir="${tvbrowser.runtime.dir}/plugins"/>
    <jar jarfile="${tvbrowser.runtime.dir}/plugins/ProgramInfo.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="programinfo/**"/>
    </jar>
    <jar jarfile="${tvbrowser.runtime.dir}/plugins/ReminderPlugin.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="reminderplugin/**"/>
    </jar>
    <jar jarfile="${tvbrowser.runtime.dir}/plugins/SearchPlugin.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="searchplugin/**"/>
    </jar>
    <jar jarfile="${tvbrowser.runtime.dir}/plugins/PrintPlugin.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="printplugin/**"/>
    </jar>
    <jar jarfile="${tvbrowser.runtime.dir}/plugins/FavoritesPlugin.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="favoritesplugin/**"/>
    </jar>
    <jar jarfile="${tvbrowser.runtime.dir}/plugins/ShowviewPlugin.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="showviewplugin/**"/>
    </jar>

    <jar jarfile="${tvbrowser.runtime.dir}/plugins/GoogleSearchPlugin.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="googlesearchplugin/**"/>
    </jar>
    <jar jarfile="${tvbrowser.runtime.dir}/plugins/ImdbSearchPlugin.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="imdbsearchplugin/**"/>
    </jar>
    <jar jarfile="${tvbrowser.runtime.dir}/plugins/TVRaterPlugin.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="tvraterplugin/**"/>
    </jar>

	<!-- Pack the TV data service jars -->    
    <mkdir dir="${tvbrowser.runtime.dir}/tvdataservice"/>
    <jar jarfile="${tvbrowser.runtime.dir}/tvdataservice/TvBrowserDataService.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="tvbrowserdataservice/**"/>
    </jar>
    <!--
    <jar jarfile="${tvbrowser.runtime.dir}/tvdataservice/XmlTvDataService.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="xmltvdataservice/**"/>
    </jar>
    
    <jar jarfile="${tvbrowser.runtime.dir}/tvdataservice/PremiereDataService.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="premieredataservice/**"/>
    </jar>
		<jar jarfile="${tvbrowser.runtime.dir}/tvdataservice/WdrDataService.jar"
         compress="false">
      <fileset dir="${classes.dir}" includes="wdrdataservice/**"/>
    </jar>
-->
	<!-- Copy the other stuff -->    
    <echo message="Copying the images and all the other stuff ..." />
    <mkdir dir="${tvbrowser.runtime.dir}/imgs"/>
    <copy todir="${tvbrowser.runtime.dir}/imgs">
      <fileset dir="${classes.dir}/imgs"/>
    </copy>
    <copy todir="${tvbrowser.runtime.dir}">
      <fileset dir="${txt.dir}" includes="INSTALL.txt"/>
      <fileset dir="${txt.dir}" includes="LICENSE.txt"/>
      <fileset dir="${txt.dir}" includes="website.url"/>
      <fileset dir="${txt.dir}" includes="where_is_the_exe.txt"/>
    </copy>

    <mkdir dir="${tvbrowser.runtime.dir}/themepacks"/>
    <copy todir="${tvbrowser.runtime.dir}/themepacks">
      <fileset dir="themepacks"/>
    </copy>

    <mkdir dir="${tvbrowser.runtime.dir}/help"/>
    <copy todir="${tvbrowser.runtime.dir}/help">
      <fileset dir="${src.dir}/help"/>
    </copy>

	<!-- Make the MirrorUpdater runtime -->
    <mkdir dir="${mirrorupdater.runtime.dir}"/>

	<!-- Make the PrimaryManager runtime -->
    <mkdir dir="${primarydatamanager.runtime.dir}"/>
    <mkdir dir="${primarydatamanager.runtime.dir}/prepared"/>

    
    <!-- Extract the libraries for the tvbrowser.jar into the temp.dir -->
    <mkdir dir="${unpacked.dir}/commons-net.jar"/>
    <unjar src="${lib.dir}/commons-net.jar" dest="${unpacked.dir}/commons-net.jar"/>

	<!-- Pack the tvbrowser.jar -->    
    <jar jarfile="${mirrorupdater.runtime.dir}/MirrorUpdater.jar"
         compress="false"
         index="true">
      <manifest>
        <attribute name="Main-Class" value="primarydatamanager.mirrorupdater.MirrorUpdater"/>
      </manifest>
      <fileset dir="${classes.dir}" includes="primarydatamanager/mirrorupdater/**"/>
      <fileset dir="${classes.dir}" includes="tvbrowserdataservice/file/**"/>
      <fileset dir="${classes.dir}" includes="devplugin/**"/>
      <fileset dir="${classes.dir}" includes="util/**"/>
      <fileset dir="${unpacked.dir}/commons-net.jar" includes="org/**"/>
    </jar>

    <jar jarfile="${primarydatamanager.runtime.dir}/PrimaryDataManager.jar"
         compress="false"
         index="true">
       <manifest>
          <attribute name="Main-Class" value="primarydatamanager.PrimaryDataManager"/>
       </manifest>
      <fileset dir="${classes.dir}" includes="primarydatamanager/**"/>
    <fileset dir="${classes.dir}" includes="tvbrowserdataservice/file/**"/>
	   <fileset dir="${classes.dir}" includes="devplugin/**"/>
       <fileset dir="${classes.dir}" includes="util/**"/>
    </jar>
    
    

    <!-- Copy the file(s) -->
    <copy todir="${primarydatamanager.runtime.dir}/prepared">
      <fileset dir="${txt.dir}" includes="mirrorlist.txt"/>
    </copy>
    
    <copy todir="${mirrorupdater.runtime.dir}">
      <fileset dir="${txt.dir}" includes="MirrorUpdater.ini"/>
    </copy>
  </target>


     


  <!--
   | Runs the project.
   +-->
  <target name="run" depends="runtime">
    <java jar="${tvbrowser.runtime.dir}/tvbrowser.jar"
          dir="${tvbrowser.runtime.dir}"
          fork="true">
    </java>
  </target>


  <taskdef name="jsmoothgen" 
     classname="net.charabia.jsmoothgen.ant.JSmoothGen" 
     classpath="${jsmooth.dir}/lib/jsmoothgen-ant.jar"/> 

  <target name="exe" depends="runtime" description="Creates a Windows Executable with the help of JSmooth (http://jsmooth.sf.net)"> 
    <jsmoothgen project="${jsmooth.dir}/tvbrowser.jsmooth" skeletonroot="${jsmooth.dir}/skeletons"/> 
  </target>  


  <!--
   | Creates a Windows installer for the project.
   +-->
  <target name="installer" depends="runtime, exe">
    <mkdir dir="${public.dir}"/>
    <exec executable="${installer.dir}/makensis.exe"
          failonerror="true">
      <arg line="/NOCD /DVERSION=${version} /DVERSION_FILE=${version.file} /DPROG_NAME=${programname} /DPROG_NAME_FILE=${programname.file} /DRUNTIME_DIR=${tvbrowser.runtime.dir} /DINSTALLER_DIR=${installer.dir} /DPUBLIC_DIR=${public.dir} ${installer.dir}\tvbrowser.nsi"/>
    </exec>
  </target>



  <!--
   | Creates all the stuff that can be downloaded.
   |
   | This target depends on clean-runtime to be sure that the runtime
   | directory contains no stuff we don't want to be destributed.
   +-->
  <target name="public" depends="clean, clean-runtime, test, runtime, doc, installer">
    <mkdir dir="${public.dir}"/>

    <zip destfile="${public.dir}/tvbrowser_v${version}_bin.zip">
      <zipfileset prefix="tvbrowser_v${version}"
                  dir="${tvbrowser.runtime.dir}"/>
    </zip>

    <zip destfile="${public.dir}/tvbrowser_v${version}_doc.zip">
      <zipfileset prefix="tvbrowser_v${version}/doc"
                  dir="${doc.dir}"/>
    </zip>

    <zip destfile="${public.dir}/tvbrowser_v${version}_src.zip">
      <zipfileset prefix="tvbrowser_v${version}/src"
                  dir="${src.dir}">
        <include name="tvbrowser/**/*.java"/>
        <include name="tvbrowser/**/*.properties"/>
        <include name="imgs/**/*.gif"/>
        <include name="imgs/**/*.jpg"/>
        <include name="devplugin/**/*.java"/>
        <include name="devplugin/**/*.properties"/>
        <include name="tvdataservice/**/*.java"/>
        <include name="tvdataservice/**/*.properties"/>
        <include name="util/**/*.java"/>
        <include name="util/**/*.properties"/>
      </zipfileset>
      <zipfileset prefix="tvbrowser_v${version}/src"
                  dir="${txt.dir}"
                  includes="LICENSE.txt"/>
    </zip>

    <zip destfile="${public.dir}/tvbrowser_v${version}_cvs.zip">
      <zipfileset prefix="tvbrowser_v${version}"
                  dir=".">
        <include name="Overview.txt"/>
        <include name="build.*"/>
      </zipfileset>
      <zipfileset prefix="tvbrowser_v${version}/${installer.dir}"
                  dir="${installer.dir}"
                  includes="*"/>
      <zipfileset prefix="tvbrowser_v${version}/${lib.dir}"
                  dir="${lib.dir}"
                  includes="*"/>
      <zipfileset prefix="tvbrowser_v${version}/${src.dir}"
                  dir="${src.dir}">
        <include name="**/*.java"/>
        <include name="**/*.properties"/>
        <include name="**/*.txt"/>
        <include name="**/*.dtd"/>
        <include name="**/*.gif"/>
        <include name="**/*.jpg"/>
        <include name="**/*.html"/>
      </zipfileset>
      <zipfileset prefix="tvbrowser_v${version}/${txt.dir}"
                  dir="${txt.dir}">
        <include name="*"/>
        <include name="package-lists/jdk/package-list"/>
      </zipfileset>
    </zip>

    <antcall target="-zipPackageSrc">
      <param name="package" value="programinfo"/>
    </antcall>

    <antcall target="-zipPackageSrc">
      <param name="package" value="reminderplugin"/>
    </antcall>

    <antcall target="-zipPackageSrc">
      <param name="package" value="searchplugin"/>
    </antcall>

    <antcall target="-zipPackageSrc">
      <param name="package" value="favoritesplugin"/>
    </antcall>

    <antcall target="-zipPackageSrc">
      <param name="package" value="showviewplugin"/>
    </antcall>
  </target>



  <!--
   | Helper target for public.
   |
   | Zips the source code of one package.
   +-->
  <target name="-zipPackageSrc" if="package">
    <zip destfile="${public.dir}/${package}_v${version}_src.zip">
      <zipfileset prefix="tvbrowser_v${version}/src"
                  dir="${src.dir}">
        <include name="${package}/**/*.java"/>
        <include name="${package}/**/*.properties"/>
        <include name="${package}/**/*.gif"/>
        <include name="${package}/**/*.jpg"/>
        <include name="${package}/**/*.dtd"/>
      </zipfileset>
      <zipfileset prefix="tvbrowser_v${version}/src"
                  dir="${txt.dir}"
                  includes="LICENSE.txt"/>

    </zip>
  </target>



  <!--
   | Creates all.
   +-->
  <target name="all" depends="public">
  </target>



  <!--
   | Does the JUnit tests.
   +-->
  <target name="test" depends="make">
    <junit haltonfailure="yes">
      <classpath>
        <path refid="classpath"/>
      </classpath>
      
      <formatter type="plain" usefile="false"/>
      
      <batchtest>
        <fileset dir="${src.dir}">
          <include name="test/**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

</project>
